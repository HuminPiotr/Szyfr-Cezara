{"version":3,"sources":["modules/caesar13.js","script.js"],"names":["caesar13","text","alphabet","alphabetBig","toUpperCase","shiftNumber","result","map","el","test","index","indexOf","newIndex","length","join","input","document","getElementById","btnEncript","querySelector","addEventListener","innerHTML","value","classList","add"],"mappings":";;ACAA;;;;AAEA,IAAMe,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAd;AACA,IAAMC,UAAU,GAAGF,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAnB;AACA,IAAMhB,IAAI,GAAGe,QAAQ,CAACG,aAAT,CAAuB,QAAvB,CAAb;AAEAD,UAAU,CAACE,gBAAX,CAA4B,OAA5B,EAAqC,YAAM;AACzCnB,EAAAA,IAAI,CAACoB,SAAL,GAAiB,qBAASN,KAAK,CAACO,KAAf,CAAjB;AACArB,EAAAA,IAAI,CAACsB,SAAL,CAAeC,GAAf,CAAmB,QAAnB;AACD,CAHD;;;ADNA,SAASxB,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,MAAIC,QAAQ,GAAG,4BAAf;;AACA,MAAMC,WAAW,sBAAOD,QAAQ,CAACE,WAAT,EAAP,CAAjB;;AACAF,EAAAA,QAAQ,sBAAOA,QAAP,CAAR;AACA,MAAMG,WAAW,GAAG,EAApB,CAJsB,CAIE;;AACxB,MAAIC,MAAM,GAAG,EAAb;AAEA,MAAI,OAAOL,IAAP,KAAgB,QAApB,EAA8B,OAAO,iCAAP;AAE9B,MAAIA,IAAI,IAAI,EAAZ,EAAgB,OAAO,kCAAP;AAEhBA,EAAAA,IAAI,sBAAOA,IAAP,CAAJ;AAEAK,EAAAA,MAAM,GAAGL,IAAI,CAACM,GAAL,CAAS,UAAAC,EAAE,EAAI;AACtB,QAAIA,EAAE,KAAK,GAAP,IAAc,KAAKC,IAAL,CAAUD,EAAV,CAAlB,EAAiC,OAAOA,EAAP,CADX,CACsB;;AAE5C,QAAI,QAAQC,IAAR,CAAaD,EAAb,CAAJ,EAAsB;AACpB;AACA,UAAME,KAAK,GAAGP,WAAW,CAACQ,OAAZ,CAAoBH,EAApB,CAAd;AACA,UAAMI,QAAQ,GAAG,CAACF,KAAK,GAAGL,WAAT,IAAwBH,QAAQ,CAACW,MAAlD;AACA,aAAOV,WAAW,CAACS,QAAD,CAAlB;AACD,KALD,MAKO;AACL;AACA,UAAMF,MAAK,GAAGR,QAAQ,CAACS,OAAT,CAAiBH,EAAjB,CAAd;;AACA,UAAMI,SAAQ,GAAG,CAACF,MAAK,GAAGL,WAAT,IAAwBH,QAAQ,CAACW,MAAlD;;AACA,aAAOX,QAAQ,CAACU,SAAD,CAAf;AACD;AACF,GAdQ,CAAT;AAeA,SAAON,MAAM,CAACQ,IAAP,CAAY,EAAZ,CAAP;AACD;;eAEcd","file":"script.75da7f30.js","sourceRoot":"..","sourcesContent":["function caesar13(text) {\r\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\r\n  const alphabetBig = [...alphabet.toUpperCase()];\r\n  alphabet = [...alphabet];\r\n  const shiftNumber = 13; //liczba o którą przesuwana jest szyfrowana litera\r\n  let result = [];\r\n\r\n  if (typeof text !== \"string\") return \"Wpisana fraza musi być tekstem!\";\r\n\r\n  if (text == \"\") return \"Wpisana fraza nie może być pusta\";\r\n\r\n  text = [...text];\r\n\r\n  result = text.map(el => {\r\n    if (el === \" \" || /\\d/.test(el)) return el; //Sprawdzamy spacje i cyfry\r\n\r\n    if (/[A-Z]/.test(el)) {\r\n      //Wielkie litery pozostają wielkie\r\n      const index = alphabetBig.indexOf(el);\r\n      const newIndex = (index + shiftNumber) % alphabet.length;\r\n      return alphabetBig[newIndex];\r\n    } else {\r\n      //Małe pozostają małe\r\n      const index = alphabet.indexOf(el);\r\n      const newIndex = (index + shiftNumber) % alphabet.length;\r\n      return alphabet[newIndex];\r\n    }\r\n  });\r\n  return result.join(\"\");\r\n}\r\n\r\nexport default caesar13;\r\n","import caesar13 from \"./modules/caesar13\";\r\n\r\nconst input = document.getElementById(\"input\");\r\nconst btnEncript = document.getElementById(\"btnEncript\");\r\nconst text = document.querySelector(\".reply\");\r\n\r\nbtnEncript.addEventListener(\"click\", () => {\r\n  text.innerHTML = caesar13(input.value);\r\n  text.classList.add(\"active\");\r\n});\r\n"]}